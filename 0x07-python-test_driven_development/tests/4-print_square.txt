# 4-print_square.txt

===========================
How to Use 4-print_square.py
===========================

This module defines a square function ``print_square(size)``.

Usage
=====

Squares are printed using the ``#`` character. The ``size`` argument represents
the heights and width of the square.

::

    >>> print_square = __import__('4-print_square').print_square
    >>> print_square(1)
    #

::

    >>> print_square(4)
    ####
    ####
    ####
    ####

::

    >>> print_square(10)
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########

If ``size`` is zero, the function prints nothing.

::

    >>> print_square(0)


Invalid Sizes
================

The ``size`` parameters must be strings, if not
a TyperError will be raised.

::

    >>> print_square("not int")
    Traceback (most recent call last):
    TypeError: size must be an integer

::

    >>> print_square(3.3)
    Traceback (most recent call last):
    TypeError: size must be an integer


::

    >>> print_square(None)
    Traceback (most recent call last):
    TypeError: size must be an integer

If ``size`` is less than zero, a ValueError is raised.

::

    >>> print_square(-3)
    Traceback (most recent call last):
    ValueError: size must be >= 0

Note that type checking will occur before checking the value.

::

    >>> print_square(-3.3) # doctest: +IGNORE_EXCEPTION_DETAIL
    Traceback (most recent call last)
    TypeError: size must be an integer

One argument must be provided at least

::

    >>> print_square()
    Traceback (most recent call last):
    TypeError: print_square() missing 1 required positional argument: 'size'
