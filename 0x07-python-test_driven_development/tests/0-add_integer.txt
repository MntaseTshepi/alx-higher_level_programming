# 0-add_integer.txt

===========================
How to Use 0-add_integer.py
===========================

This module defines an integer addition function "add_integer(a, b=98)".

Usage
=====

"add_integer(...)" returns the addition of the two arguments. For numbers,
the result is equivalent to the usage of the "+" operator.

::

    >>> add_integer = __import__('0-add_integer').add_integer
    >>> add_integer(2, 3)
    5

::

    >>> add_integer(2, -3)
    -1

The function can work using floating-point values.

::

    >>> add_integer(2.0, 3.0)
    5

Note that floats are cast to int before addition is done.

::

    >>> add_integer(2.9, 0.2)
    2

::

    >>> add_integer(-2.9, -0.2)
    -2

Integers and floating point values can be combined.

::

    >>> add_integer(2.3, -3)
    -1

The addition of a second argument is optional - the default value is 98.

::

    >>> add_integer(2)
    100

Non-numbers
===========

``add_integer()`` expects both arguments to either be integers or floats.
If an argument is neither, a TyperError will be raised.

::

    >>> add_integer("hi", 3)
    Traceback (most recent call last):
    TyperError: a must be an integer

::

    >>> add_integer(2, "Tom")
    Traceback (most recent call last):
    TyperError: b must be an integer

::

    >>> add_integer(None)
    Traceback (most recent call last):
    TyperError: a must be an integer

::

    >>> add_integer(2.3, None)
    Traceback (most recent call last):
    TyperError: b must be an integer

If both arguments are neither integers nor floats, the TypeError message
is only printed for the first argument.

::

    >>> add_integer("hey", "there") # doctest: +IGNORE_EXCEPTION_DETAIL
    Traceback (most recent call last):
    TyperError: a must be an integer

The function fails if infinity is provided.

::

    >>> add_integer(float('inf')) # doctest: +IGNORE_EXCEPTION_DETAIL
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

::

    >>> add_integer(2, float('inf')) # doctest: +IGNORE_EXCEPTION_DETAIL
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

The function also fails with NaN numbers.

::

    >>> add_integer(float('nan')) # doctest: +IGNORE_EXCEPTION_DETAIL
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer

::

    >>> add_integer(2, float('nan')) # doctest: +IGNORE_EXCEPTION_DETAIL
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer
